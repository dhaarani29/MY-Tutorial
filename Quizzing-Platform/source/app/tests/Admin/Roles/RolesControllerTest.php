<?php

namespace QuizzingPlatform\Admin\Roles;

//Use silex webtestcase which act as a browser

use QuizzingPlatform\Services\TestWebtestcase;
use Silex\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 15:06:06.
 */
class RolesControllerTest extends TestWebtestcase {

    /**
     * @covers QuizzingPlatform\Admin\Roles\RolesController::testGetAllRoles
     * @todo   Implement testGetAllRoles().
     */
    public function testGetAllRoles() {

        $client = $this->createClient();
        //Success scenario
        $userId = 1;
        $url = $this->host . 'api/roles' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('Super Administrator', $client->getResponse()->getContent());
        //Permission Error
        $userId = 1234;
        $url = $this->host . 'api/roles' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('5500', $client->getResponse()->getContent());
        //With Filters
        $userId = 1;
        $roleName = 'admin';
        $description = '';
        $page = '1';
        $perPage = '10';
        $sort = '%2BroleName';

        $queryParam = '&page=' . $page . '&perPage=' . $perPage . '&sort=' . $sort;
        if ($roleName != '') {
            $queryParam .= '&roleName=' . $roleName;
        }
        if ($description != '') {
            $queryParam .= '&description=' . $description;
        }

        $url = $this->host . 'api/roles' . '?userId=' . $userId . $queryParam; //echo $url;die;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');        //Request the Url with Get method
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('Admin', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Roles\RolesController::testGetRolesById
     * @todo   Implement testGetRolesById().
     */
    public function testGetRolesById() {
        $client = $this->createClient();

        // Check for possitive case
        $id = 1;
        $userId = 1;
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "roleData by Id response"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertContains('1', $client->getResponse()->getContent()); //checking the response contains Id which is passed by Url
        //
        // Check for permission error
        $id = 1;
        $userId = '1234';
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');         //Request the Url with Post method and posting sample json content
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
    }

    /**
     * @covers QuizzingPlatform\Admin\Roles\RolesController::testDeleteRoleById
     * @todo   Implement testDeleteRoleById().
     */
    public function testDeleteRoleById() {
        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        // Check for positive case
        $id = 1;
        $userId = 1;
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        // Check for permission issues.
        $id = 40;
        $userId = '1000';
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        //check for record doesn't exists OR check for Roles associated with Users
        $id = 1;
        $userId = 1;
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
    }

    /**
     * @covers QuizzingPlatform\Admin\Roles\RolesController::createRole
     * @todo   Implement createRole().
     */
    public function testCreateRole() {
        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        // Check for duplicate name case

        $userId = 65;
        $url = $this->host . 'api/roles?userId=' . $userId;
        $sampleInputs = '{
	"userId":65,
        "roleName":"fdsfsdf",
        "description":"sfsdfsdf"
        }';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('Duplicate Role Name is not allowed.', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        // Check for positive case

        $userId = 65;
        $url = $this->host . 'api/roles?userId=' . $userId;
        $sampleInputs = '{
	"userId":65,
        "roleName":"new role",
        "description":"sfsdfsdf"
        }';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);

        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        // Check for permission issues.

        $userId = 645;
        $url = $this->host . 'api/roles?userId=' . $userId;
        $sampleInputs = '{
	"userId":645,
        "roleName":"fdsfsdf",
        "description":"sfsdfsdf"
        }';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);

        //echo $client->getResponse()->getStatusCode();die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Roles\RolesController::UpdateRole
     * @todo   Implement UpdateRole().
     */
    public function testUpdateRole() {
        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        // Check for duplicate name case
        $id = 8;
        $userId = 65;
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $sampleInputs = '{
	"roleName":"dfdsf",
        "description":"cxvcxv",
        "userId":65
        }';
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('Duplicate Role Name is not allowed.', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        // Check for positive case

        $id = 8;
        $userId = 65;
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $sampleInputs = '{
	"roleName":"cxvcxvsfaf edit",
        "description":"cxvcxv",
        "userId":65
        }';
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        // Check for permission issues.

        $id = 8;
        $userId = 635;
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $sampleInputs = '{
	"roleName":"cxvcxvsfaf edit",
        "description":"cxvcxv",
        "userId":635
        }';
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);

        //echo $client->getResponse()->getStatusCode();die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        $id = 5558;
        $userId = 65;
        $url = $this->host . 'api/roles/' . $id . '?userId=' . $userId;
        $sampleInputs = '{
	"roleName":"cxvcxvsfaf edit",
        "description":"cxvcxv",
        "userId":65
        }';
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);
        //print_r( $client->getResponse()->getContent());die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('6013', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

}
