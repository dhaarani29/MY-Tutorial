<?php

namespace QuizzingPlatform\Admin\Reports;

//Use silex webtestcase Common file for all setup

use QuizzingPlatform\Services\TestWebtestcase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 11:53:00.
 */
class ReportsControllerTest extends TestWebtestcase {

    /**
     * @covers QuizzingPlatform\Admin\Reports\ReportsController::clientReport
     * @todo   Implement testClientReport().
     */
    public function testClientReport() {
        $client = $this->createClient();

        /*
         * Permission Error
         */

        $userId = 1234;
        $url = $this->host . 'api/reports/clientreport' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');

        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario with filter
         */

        $clientName = 'wk';
        $perPage = 10;
        $sort = "%2BclientName"; // +id sort
        $userId = 65;
        $page = 1;

        $queryParam = '?userId=' . $userId . '&clientName=' . $clientName .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort;
        $url = $this->host . 'api/reports/clientreport' . $queryParam;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];

        if ($reqTotal > 0) {

            if ($clientName != '') {
                $this->assertContains('WK', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Test list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Reports\ReportsController::getUsage
     * @todo   Implement testGetUsage().
     */
    public function testGetUsage() {
        $client = $this->createClient();

        /*
         * Permission Error
         */

        $userId = 1234;
        $url = $this->host . 'api/reports/studentusagereport' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');

        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario with filter
         */

        $title = 'test';
        $startDate = '';
        $endDate = '';
        $perPage = 10;
        $sort = "%2Btitle"; // +id sort
        $userId = 65;
        $page = 1;

        $queryParam = '?userId=' . $userId . '&title=' . $title . '&startDate=' . $startDate . '&endDate=' . $endDate .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort;
        $url = $this->host . 'api/reports/studentusagereport' . $queryParam;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];

        if ($reqTotal > 0) {

            if ($title != '') {
                $this->assertContains('test', $response);
            }
            if ($startDate != '') {
                $this->assertContains('', $response);
            }
            if ($endDate != '') {
                $this->assertContains('', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Test list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Reports\ReportsController::getUserQuizzing
     * @todo   Implement testGetUserQuizzing().
     */
    public function testGetUserQuizzing() {
        $client = $this->createClient();

        /*         * ****************************ADMIN questions with wrong answer LISTING******************************* */

        /*
         * Permission Error
         */

        $userId = 1234;
        $url = $this->host . 'api/reports/userquizzingreport' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        //print_r($client->getResponse()->getStatusCode());die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario with filter
         */

        $title = 'Emergency';
        $perPage = 10;
        $sort = "%2Btitle"; // +id sort
        $userId = 65;
        $page = 1;

        $queryParam = '?userId=' . $userId . '&title=' . $title .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort;
        $url = $this->host . 'api/reports/userquizzingreport' . $queryParam;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];

        if ($reqTotal > 0) {

            if ($title != '') {
                $this->assertContains('Emergency', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Test list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Reports\ReportsController::metadataReport
     * @todo   Implement testMetadataReport().
     */
    public function testMetadataReport() {
        $client = $this->createClient();

        /*         * ****************************ADMIN questions with wrong answer LISTING******************************* */

        /*
         * Permission Error
         */

        $userId = 1234;
        $url = $this->host . 'api/reports/metadatareport' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        //print_r($client->getResponse()->getStatusCode());die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario with filter
         */

        $value = '111';
        $metadataRequest = '';
        $perPage = 10;
        $sort = "%2Bvalue"; // +id sort
        $userId = 65;
        $page = 1;

        $queryParam = '?userId=' . $userId . '&value=' . $value .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort;
        $url = $this->host . 'api/reports/metadatareport' . $queryParam; //echo $url;die;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];
        //echo $res['total'];die;
        if ($reqTotal > 0) {

            if ($value != '') {
                $this->assertContains('111', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Test list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*         * ***************************END ADMIN questions with wrong answer LISTING************************** */
    }

    /**
     * @covers QuizzingPlatform\Admin\Reports\ReportsController::incorrectItemReport
     * @todo   Implement testIncorrectItemReport().
     */
    public function testIncorrectItemReport() {
        $client = $this->createClient();

        /*         * ****************************ADMIN questions with wrong answer LISTING******************************* */

        /*
         * Permission Error
         */

        $userId = 1234;
        $url = $this->host . 'api/reports/itemreport' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario with filter
         */

        $label = 'CM';
        $metadataRequest = '';
        $perPage = 10;
        $sort = "%2Blabel"; // +id sort
        $userId = 65;
        $page = 1;

        $queryParam = '?userId=' . $userId . '&label=' . $label .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort;
        $url = $this->host . 'api/reports/itemreport' . $queryParam; //echo $url;die;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];
        if ($reqTotal > 0) {

            if ($label != '') {
                $this->assertContains('CM', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Test list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*         * ***************************END ADMIN questions with wrong answer LISTING************************** */
    }

}
