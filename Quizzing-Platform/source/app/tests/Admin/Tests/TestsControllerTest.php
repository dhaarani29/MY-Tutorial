<?php

namespace QuizzingPlatform\Admin\Tests;

//Use silex webtestcase which act as a browser

use QuizzingPlatform\Services\TestWebtestcase;
use Silex\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 15:06:06.
 */
class TestsControllerTest extends TestWebtestcase {

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testCreateTest
     * @todo   Implement testCreateTest
     */
    public function testCreateTest() {
        $client = $this->createClient();

        /*         * ********************** ADMIN QUIZ CREATION ******************************* */

        /*
         * Permission Error
         */
        $sampleData = '{"userId":"51782"}';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Invalid input request
         */
        $sampleData = '{"u111serId":"67"}';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4002', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Request Empty
         */
        $sampleData = '';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4007', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario
         */
        $sampleInput = '{ 
                        "title":"testtt",
                        "label":"testdesc",
                        "testType":"Admin",
                        "navigationType": "1",
                        "quizTime":"45",
                        "userId": 1,
                        "allowLateSubmission": true,
                        "chooseQuestion": true,
                        "randomizeAnswer": true,
                        "randomizeQuestion": true,
                        "testMode": true,
                        "testItems":"1,2",
                        "testItemBanks": "1,2",
                        "metadataAssoc":{"34":201,"85":["121"],"87":"ddd"}
                        }';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Item Id as response."); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Duplicate Test name
         */
        $sampleInput = '{ 
                        "title":"testname",
                        "label":"testdesc",
                        "testType":"Admin",
                        "navigationType": "1",
                        "quizTime":"45",
                        "userId": 1,
                        "allowLateSubmission": true,
                        "chooseQuestion": true,
                        "randomizeAnswer": true,
                        "randomizeQuestion": true,
                        "testMode": true,
                        "testItems":"1,2",
                        "testItembanks": "1,2"
                        }';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4004', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*         * ****************************END USER QUIZ CREATION******************************* */

        /*
         * mandatory Field required
         */
        $sampleData = '{ 
                  "id" : "akdhf@54Eq",
		  "clientUserId"     : "1",
		  "questionTime"   : "60",
		  "metadataAssoc" : "554",
		  "reviewMode"      : false,
		  "noofQuestions"  : "30",
		  "newQuestions"  : true,
		  "gotWrong"         :  true
          }';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4008', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Invalid input request
         */
        $sampleData = '{"u111serId":"67"}';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4002', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Request Empty
         */
        $sampleData = '';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4003', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * MetadataId or metadatavalue id validation
         */

        $sampleData = '{ 
                 
		  "clientUserId"     : "1",
		  "questionTime"   : "60",
		  "metadataAssoc" : "554",
		  "reviewMode"      : false,
		  "noofQuestions"  : "30",
		  "newQuestions"  : true,
		  "gotWrong"         :  true
                 }';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4001', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json


        /*
         * Success scenario
         */
        $sampleInput = '{
		  "id" : "akdhf@54Eq",
		  "title" : "general Quiz 91 By dhaarani",
		  "clientUserId"     : "1",
		  "questionTime"   : "60",
		  "metadataAssoc" : "521",
		  "reviewMode"      : false,
		  "noofQuestions"  : "30",
		  "newQuestions"  : true,
		  "gotWrong"         :  true
	       }';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Item Id as response."); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Duplicate test name
         */
        $sampleData = ' {
		  "id" : "akdhf@54Eq",
		  "title" : "general Quiz 4 By dhaarani",
		  "clientUserId"     : "1",
		  "questionTime"   : "60",
		  "metadataAssoc" : "554",
		  "reviewMode"      : false,
		  "noofQuestions"  : "30",
		  "newQuestions"  : true,
		  "gotWrong"         :  true
	       }
';
        $url = $this->host . 'api/tests';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4004', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testGetTestById
     * @todo   Implement testGetTestById
     */
    public function testGetTestById() {
        $client = $this->createClient();

        /*         * *************************ADMIN GET BY ID******************************* */

        /*
         * Permission Error
         */
        $id = '12';
        $userId = 1234;
        $url = $this->host . 'api/tests/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario
         */
        $id = '12';
        $userId = 66;
        $url = $this->host . 'api/tests/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('testtt', $client->getResponse()->getContent());

        /*
         * Test not found
         */
        $id = '101';
        $userId = 66;
        $url = $this->host . 'api/tests/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*         * ****************************END USER GET BY ID********************************************** */

        /*
         * Test fetch for given id for end user
         */

        //success case
        $id = '57';
        $userId = 1;
        $url = $this->host . 'api/tests/' . $id;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('quizType', $client->getResponse()->getContent());

        //not found when wrong id is given
        $id = '575';
        $userId = 1;
        $url = $this->host . 'api/tests/' . $id;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4005', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testGetTest
     * @todo   Implement testGetTest
     */
    public function testGetTest() {
        $client = $this->createClient();

        /*         * ****************************ADMIN QUIZ LISTING******************************* */

        /*
         * Permission Error
         */

        $userId = 1234;
        $url = $this->host . 'api/tests' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario with filter
         */
        $title = 'testtt';
        $label = '';
        $metadataRequest = '';
        $perPage = 10;
        $sort = "%2Btitle"; // +id sort
        $userId = 1;
        $page = 1;

        $queryParam = '?userId=' . $userId . '&title=' . $title . '&label=' . $label . '&metadataAssoc=' . $metadataRequest .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort;
        $url = $this->host . 'api/tests' . $queryParam; //echo $url;die;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];
        if ($reqTotal > 0) {
            if ($title != '') {
                $this->assertContains('testtt', $response);
            }
            if ($label != '') {
                $this->assertContains('', $response);
            }
            if ($metadataRequest != '') {
                $this->assertContains('', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Test list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*         * ***************************END USER QUIZ LISTING************************** */

        /*
         * success scenario (custom quiz listing)
         */

        $clientUserId = 1;
        $queryParam = '?clientUserId=' . $clientUserId . '&quizType=c';
        $url = $this->host . 'api/tests' . $queryParam;
        $client->request('GET', $url, array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                array()); //Request the Url with Post method and posting sample json content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Test list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testDeleteTest
     * @todo   Implement testDeleteTest
     */
    public function testDeleteTest() {

        $client = $this->createClient();

        /*         * ***************************ADMIN QUIZ DELETE********************************* */

        /*
         * Permission Error
         */
        $userId = 12345;
        $id = 20;
        $url = $this->host . 'api/tests' . '/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario
         */
        $userId = 66;
        $id = 3;
        $url = $this->host . 'api/tests' . '/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        /*
         * InActive test
         */
        $userId = 1;
        $id = 2;
        $url = $this->host . 'api/tests' . '/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        /*         * ***************************END USER QUIZ DELETE***************************** */

        /*
         * Instance delete
         */
        $id = '57';
        $instanceId = '4';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances/' . $instanceId . '?clientUserId=' . $clientUserId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        /*
         * Success scenario
         */

        $clientUserId = 1;
        $testId = 1;
        $url = $this->host . 'api/tests' . '/' . $testId . '?clientUserId=' . $clientUserId;
        $client->request('DELETE', $url, array(), array(), array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), array());
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        /*
         * Test Not found
         */
        $clientUserId = 1;
        $testId = 23;
        $url = $this->host . 'api/tests' . '/' . $testId . '?clientUserId=' . $clientUserId;
        $client->request('DELETE', $url, array(), array(), array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), array());
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * validation
         */

        $testId = 2;
        $url = $this->host . 'api/tests' . '/' . $testId;
        $client->request('DELETE', $url, array(), array(), array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), array());
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4008', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * delete fails when clientuser id not passed
         */
        $id = '57';
        $instanceId = '4';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances/' . $instanceId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4008', $client->getResponse()->getContent());

        /*
         * delete fails when wrong id  passed
         */
        $id = '57';
        $instanceId = '344';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances/' . $instanceId . '?clientUserId=' . $clientUserId;
        ;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4005', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testUpdateTest
     * @todo   Implement testUpdateTest
     */
    public function testUpdateTest() {
        $client = $this->createClient();

        /*         * **************ADMIN QUIZ UPDATE********************************* */

        /*
         * Permission Error
         */
        $sampleData = '{"userId":"12314"}';
        $id = 24;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Succeess Scenario
         */
        $id = 12;
        $sampleInput = '{ 
                        "title":"testtt",
                        "label":"testdesc",
                        "navigationType": "1",
                        "quizTime":"45",
                        "userId": 1,
                        "allowLateSubmission": true,
                        "chooseQuestion": true,
                        "randomizeAnswer": true,
                        "randomizeQuestion": true,
                        "testMode": true,
                        "associatedItems":"3",
                        "associatedItemBanks":"1,2",
                        "dissociatedItems":"2",
                        "dissociatedItemBanks":"",
                        "metadataAssoc":{"34":201,"85":["121"],"87":"ddd"}
                      }';
        $url = $this->host . 'api/tests/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        /*
         * Duplicate name
         */
        $sampleInput = '{ 
                        "title":"testtt",
                        "label":"testdesc",
                        "testType":"Admin",
                        "navigationType": "1",
                        "quizTime":"45",
                        "userId": 1,
                        "allowLateSubmission": true,
                        "chooseQuestion": true,
                        "randomizeAnswer": true,
                        "randomizeQuestion": true,
                        "testMode": true,
                        "testItems":"1,2",
                        "testItembanks": "1,2",
                        "metadataAssoc":{"34":201,"85":["121"],"87":"ddd"}
                      }';
        $id = 1;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4004', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json


        /*
         * Test not found
         */
        $sampleInput = '{ 
                        "title":"testname",
                        "label":"testdesc",
                        "testType":"Admin",
                        "navigationType": "1",
                        "quizTime":"45",
                        "userId": 1,
                        "allowLateSubmission": true,
                        "chooseQuestion": true,
                        "randomizeAnswer": true,
                        "randomizeQuestion": true,
                        "testMode": true,
                        "testItems":"1,2",
                        "testItembanks": "1,2",
                        "metadataAssoc":{"34":201,"85":["121"],"87":"ddd"}
                        }';
        $id = 123;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Invalid Input request
         */
        $sampleData = '{"ab":"1"}';
        $id = 24;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4002', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*         * ***************************END USER QUIZ UPDATE*************************** */

        /*
         * Test not found
         */
        $sampleInput = '{
                        "title"        : "custom",
                        "clientUserId" : "1",
                        "questionTime" : "60",
                        "metadataAssoc": "439,441",
                        "reviewMode"   : true,
                        "noofQuestions": "20",
                        "newQuestions" : false,
                        "gotWrong"     :  true
                       }';
        $id = 576;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleInput); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json


        /*
         * Invalid Input request
         */
        $sampleData = '{"ab":"1"}';
        $id = 24;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4002', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * metadataId or metadatavalueid validation
         */
        $sampleData = '{ 
                 
		  "clientUserId"     : "1",
		  "questionTime"   : "60",
		  "metadataAssoc" : "554",
		  "reviewMode"      : false,
		  "noofQuestions"  : "30",
		  "newQuestions"  : true,
		  "gotWrong"         :  true
                 }';
        $id = '12';
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData);
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4001', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json


        /*
         * Succeess Scenario
         */
        $id = 27;
        $sampleInput = '{ 
                        "title":"new",
                        "clientUserId": 4,
                        "testMode": true,
                        "questionTime":120,
                        "testTarget":{
                              "type":2,
                              "noOfQuestions":"10"
                           },
                       "associatedItems":"3",
                        "associatedItemBanks":"3",
                        "dissociatedItems":"1",
                        "dissociatedItemBanks":"1",
                       "metadataAssoc":{"34":201,"85":["121"],"87":"ddd"}';

        /*
         * Duplicate name
         */
        $sampleInput = '{
                        "title"        : "custom",
                        "clientUserId" : "1",
                        "questionTime" : "gf",
                        "metadataAssoc": "439,441",
                        "reviewMode"   : true,
                        "noofQuestions": "20",
                        "newQuestions" : false,
                        "gotWrong"     :  true

                       }';
        $id = 57;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleInput); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4008', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * success update request
         */
        $sampleInput = '{
                        "title"        : "custom edited",
                        "clientUserId" : "1",
                        "questionTime" : "34",
                        "metadataAssoc": "439,441",
                        "reviewMode"   : true,
                        "noofQuestions": "20",
                        "newQuestions" : false,
                        "gotWrong"     :  true
                       }';
        $id = 57;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleInput); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('name', $client->getResponse()->getContent());

        /*
         * duplicate test Input name
         */
        $sampleInput = '{
                        "title"        : "silever",
                        "clientUserId" : "1",
                        "questionTime" : "34",
                        "metadataAssoc": "439,441",
                        "reviewMode"   : true,
                        "noofQuestions": "20",
                        "newQuestions" : false,
                        "gotWrong"     :  true
                       }';
        $id = 57;
        $url = $this->host . 'api/tests' . '/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleInput); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4004', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testGetTestProgressById
     * @todo   Implement testGetTestProgressById
     */
    public function testGetTestProgressById() {
        $client = $this->createClient();

        /*
         * Success scenario
         */
        $testId = 18;
        $clientUserId = 62;
        $url = $this->host . 'api/tests/' . $testId . '/progress/' . $clientUserId;

        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('clientUserId', $client->getResponse()->getContent());

        /*
         * Test not found
         */
        $testId = 20;
        $clientUserId = 1;
        $url = $this->host . 'api/tests/' . $testId . '/progress/' . $clientUserId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testGetTestProgress
     * @todo   Implement testGetTestProgress
     */
    public function testGetTestProgress() {

        $client = $this->createClient();

        /*
         * Success scenario
         */
        $testId = 18;
        $url = $this->host . 'api/tests/' . $testId . '/progress';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('clientUserId', $client->getResponse()->getContent());

        /*
         * Test not found
         */
        $testId = 20;
        $url = $this->host . 'api/tests/' . $testId . '/progress';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('4005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /*
     * 
     */

    public function testGetTestAllInstance() {

        $client = $this->createClient();

        //bad request error when cientuserid not passed
        $id = '57';
        $url = $this->host . 'api/tests/' . $id . '/instances';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4008', $client->getResponse()->getContent());


        //success with all instance listed without progress details
        $id = '57';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances?clientUserId=' . $clientUserId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('instances', $client->getResponse()->getContent());

        //success with all instance listed with progress details
        $id = '57';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances?clientUserId=' . $clientUserId . '&summary=true';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('testProgress', $client->getResponse()->getContent());



        //not found when wrong id is given
        $id = '575';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances?clientUserId=' . $clientUserId . '&summary=true';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4005', $client->getResponse()->getContent());

        //not found when wrong user id is given
        $id = '57';
        $clientUserId = '674';
        $url = $this->host . 'api/tests/' . $id . '/instances?clientUserId=' . $clientUserId . '&summary=true';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4005', $client->getResponse()->getContent());

        //success wen test instance id is passed to get progress detials
        $id = '57';
        $instanceId = '3';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances/' . $instanceId . '?clientUserId=' . $clientUserId . '&summary=true';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('testProgress', $client->getResponse()->getContent());

        //not found wen wrong test instance id is passed to get progress detials
        $id = '57';
        $clientUserId = '67';
        $url = $this->host . 'api/tests/' . $id . '/instances/35?clientUserId=' . $clientUserId . '&summary=true';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4005', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testGetProgressBar
     * @todo   Implement testGetProgressBar
     */
    public function testGetProgressBar() {

        $client = $this->createClient();

        /*
         * Topic id is empty
         */
        $metadataValueId = '';
        $clientUserId = 1;
        $id = 'akdhf@54Eq';
        $url = $this->host . 'api/metadata/' . $id . '/tests/progress' . '?clientUserId=' . $clientUserId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertContains('4002', $client->getResponse()->getContent());

        /*
         * success scenario
         */
        $metadataValueId = '523';
        $clientUserId = 1;
        $id = 'akdhf@54Eq';
        $url = $this->host . 'api/metadata/' . $id . '/tests/progress' . '?metadataValueId=' . $metadataValueId . 'clientUserId=' . $clientUserId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertTrue($client->getResponse()->isSuccessful());
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testAssignTestInstance
     * @todo   Implement testAssignTestInstance
     */
    public function testCreateTestInstance() {

        $client = $this->createClient();

        //bad request error when cientuserid not passed
        $id = '57';
        $url = $this->host . 'api/tests/' . $id . '/instances';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4002', $client->getResponse()->getContent());


        //Check if HTTP status is success with successful association of quiz to user and questions to quiz.
        $id = '57';
        $clientUserId = '64';
        $url = $this->host . 'api/tests/' . $id . '/instances?clientUserId=' . $clientUserId;
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        //not found when wrong test id is given
        $id = '1234575';
        $clientUserId = '64';
        $url = $this->host . 'api/tests/' . $id . '/instances?clientUserId=' . $clientUserId;
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4005', $client->getResponse()->getContent());

        //not found when wrong user id is given
        $id = '57';
        $clientUserId = '1';
        $url = $this->host . 'api/tests/' . $id . '/instances?clientUserId=' . $clientUserId;
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('5500', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::testGetTestInstanceItems
     * @todo   Implement testGetTestInstanceItems
     */
    public function testGetInstanceItemDetails() {

        $client = $this->createClient();

        //bad request error when $instanceId not passed
        $instanceId = 0;
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4003', $client->getResponse()->getContent());

        //Invalid instance for a user when incorrect instanceId is passed
        $instanceId = 10;
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4013', $client->getResponse()->getContent());

        //Invalid question id passed for right instance 
        $instanceId = 10;
        $itemId = 10;
        $version = 1;
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items/' . $itemId . '/version/' . $version;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4012', $client->getResponse()->getContent());


        //HTTP success for valid instance and no item id is passed, this will get the first question or bookmarked question if any.
        $instanceId = 86;
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        //HTTP success for valid instance and item id & version is passed.
        $instanceId = 86;
        $itemId = 10;
        $version = 1;
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items/' . $itemId . '/version/' . $version;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
    }

    /**
     * @covers QuizzingPlatform\Admin\Tests\Tests::submitTestAnswers
     * @todo   Implement testSubmitTestAnswers
     */
    public function testSubmitTestAnswers() {
        $client = $this->createClient();
        //Permission error
        $instanceId = 1;
        $itemId = 1;
        $version = 1;

        $sampleData = '{  "userAnswer" : ["10","21"],
                          "timeSpent" : 1,
                          "bookmarkItem" : 10,
                          "submit" : false,
                          "clientUserId" : 78}';
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items/' . $itemId . '/version/' . $version;
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('5500', $client->getResponse()->getContent());


        //Not existing instance id
        $instanceId = 1232;
        $itemId = 1;
        $version = 1;

        $sampleData = '{  "userAnswer" : ["10","21"],
                          "timeSpent" : 1,
                          "bookmarkItem" : 10,
                          "submit" : false,
                          "clientUserId" : 84}';
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items/' . $itemId . '/version/' . $version;
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('4010', $client->getResponse()->getContent());

        //success scenario
        $instanceId = 1;
        $itemId = 42;
        $version = 1;

        $sampleData = '{  "userAnswer" : ["10","21"],
                          "timeSpent" : 1,
                          "bookmarkItem" : 10,
                          "submit" : false,
                          "clientUserId" : 84}';
        $url = $this->host . 'api/tests/instance/' . $instanceId . '/items/' . $itemId . '/version/' . $version;
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                $sampleData); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
    }

}
