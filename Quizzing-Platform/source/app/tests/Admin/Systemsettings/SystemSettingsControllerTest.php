<?php

namespace QuizzingPlatform\Admin\Systemsettings;

//Use silex webtestcase which act as a browser

use QuizzingPlatform\Services\TestWebtestcase;
use Silex\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 15:06:06.
 */
class SystemSettingsControllerTest extends TestWebtestcase {
    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetCountriesList
     * @todo   Implement testgetCountriesList().
     */

    public function testgetCountriesList() {

        $client = $this->createClient();
        $url = $this->host . 'api/countrylist';
        //Success Sceanrio
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetStatesList
     * @todo   Implement testgetStatesList().
     */

    public function testgetStatesList() {

        $client = $this->createClient();
        //Success Scenario
        $countryId = 2;
        $url = $this->host . 'api/stateslist/' . $countryId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
        //
        //If Country id is not integer
        $countryId = 'sdasd';
        $url = $this->host . 'api/stateslist/' . $countryId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());
        $this->assertContains('6007', $client->getResponse()->getContent());

        //if country id is not exist
        $countryId = '12567788';
        $url = $this->host . 'api/stateslist/' . $countryId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());
        $this->assertContains('6006', $client->getResponse()->getContent());
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetGroupsList
     * @todo   Implement testgetGroupsList().
     */

    public function testgetGroupsList() {

        $client = $this->createClient();
        $url = $this->host . 'api/grouplist';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetGroupsListById
     * @todo   Implement testgetGroupsListById().
     */

    public function testgetGroupsListById() {
        $client = $this->createClient();
        //Success Scenario
        $groupId = 1;
        $url = $this->host . 'api/grouplist/' . $groupId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
        $this->assertContains('1', $client->getResponse()->getContent());

        //Groupid is not integer
        $groupId = 'asda';
        $url = $this->host . 'api/grouplist/' . $groupId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());
        $this->assertContains('6010', $client->getResponse()->getContent());

        //if country id is not exist
        $groupId = '123';
        $url = $this->host . 'api/grouplist/' . $groupId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());
        $this->assertContains('6009', $client->getResponse()->getContent());
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testrolesInformation
     * @todo   Implement testrolesInformation().
     */

    public function testrolesInformation() {
        $client = $this->createClient();
        $url = $this->host . 'api/roleslist';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testrolesInformationById
     * @todo   Implement testrolesInformationById().
     */

    public function testrolesInformationById() {
        $client = $this->createClient();
        $roleId = 1;
        $url = $this->host . 'api/roleslist/' . $roleId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
        $this->assertContains('1', $client->getResponse()->getContent());

        //roleid is not integer
        $roleId = 'sadads';
        $url = $this->host . 'api/roleslist/' . $roleId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());
        $this->assertContains('6013', $client->getResponse()->getContent());

        //if country id is not exist
        $roleId = 10;
        $url = $this->host . 'api/roleslist/' . $roleId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());
        $this->assertContains('6012', $client->getResponse()->getContent());
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetAllStatus
     * @todo   Implement testgetAllStatus().
     */

    public function testgetAllStatus() {
        $client = $this->createClient();
        $url = $this->host . 'api/status';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
        $this->assertContains('ACTIVE', $client->getResponse()->getContent());
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetUIConfig
     * @todo   Implement testgetUIConfig().
     */

    public function testgetUIConfig() {
        $client = $this->createClient();
        $url = $this->host . 'api/systemconfig';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetMenusList
     * @todo   Implement testgetMenusList().
     */

    public function testgetMenusList() {
        $client = $this->createClient();
        $url = $this->host . 'api/adminmenu';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testgetSystemconfiguration
     * @todo   Implement testgetSystemconfiguration().
     */

    public function testgetSystemconfiguration() {
        $client = $this->createClient();
        $url = $this->host . 'api/systemconfiguration';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertNotNull($client->getResponse()->getContent(), "Permission response"); //Response content not null
    }

    /*
     * @covers QuizzingPlatform\Admin\Users\UsersController::testupdateSystemconfiguration
     * @todo   Implement testupdateSystemconfiguration().
     */

    public function testupdateSystemconfiguration() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();
        $url = $this->host . 'api/systemconfiguration';

        //Json input for sample User details
        $sampleJson = '{
                            "systememail": "sample@gmail.com",
                            "userId":"1",
                            "perpage": "10"
                        }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content 
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        // check for duplicate user information which exists
        //Json input for sample User details
        $sampleJson = '{
                            "systememail": "sample@gmail.com",
                            "userId":"5",
                            "perpage": "10"
                        }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content 
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
    }

}
