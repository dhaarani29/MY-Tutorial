<?php

namespace QuizzingPlatform\Admin\Metadata;

//Use silex webtestcase Common file for all setup

use QuizzingPlatform\Services\TestWebtestcase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 11:53:00.
 */
class MetadataControllerTest extends TestWebtestcase {

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::getMetadataTypes
     * @todo   Implement testgetMetadataTypes().
     */
    public function testgetMetadataTypes() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        $url = $this->host . 'api/metadatatypes';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');  //Request the Url with Post method and posting sample json content
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains("Free Text", $client->getResponse()->getContent());
        $this->assertNotNull($client->getResponse()->getContent(), "Metadata types response");
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::getMetadataDataTypes
     * @todo   Implement testgetMetadataDataTypes().
     */
    public function testgetMetadataDataTypes() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        $url = $this->host . 'api/metadatadatatypes';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');          //Request the Url with Post method and posting sample json content
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains("String", $client->getResponse()->getContent());
        $this->assertNotNull($client->getResponse()->getContent(), "Metadata data types response."); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::createMetadata
     * @todo   Implement testCreateMetadata().
     */
    public function testCreateMetadata() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        $url = $this->host . 'api/metadata';

        //Json input for metadata free text tag
        $sampleJson = '{
                            "tagName": "Test qwe free qwe 1",
                            "description": "Metadata tag 1",
                            "displayLabel": "Tag 1",
                            "tagTypeId": "1",
                            "dataTypeId": "1",
                            "mandatory": true,
                            "multiselect": false,
                            "userId":1
                       }';
        //Request the Url with Post method and posting sample json content
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson);  //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertTrue(is_numeric($client->getResponse()->getContent())); //Checking Reponse is numeric
        $this->assertNotNull($client->getResponse()->getContent(), "Metadata Id as response."); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        // Create Lookup metadata.  
        $url = $this->host . 'api/metadata';

        $sampleJson = '{
                        "userId":1,
                        "tagName": "Test qe Lookup qqwe qew dfsdf values 3 ss ",
                        "description": "Test Lookup tag 1",
                        "displayLabel": "Tage 3",
                        "mandatory": false,
                        "multiselect": false,
                        "status": true,
                        "createdBy": 1,
                        "tagTypeId": 2,
                        "tagType": "Lookup",
                        "dataTypeId": 1,
                        "dataType": "String",
                        "resourceAssociated": true,
                        "metadataValues": [
                          {
                            "sequence": 0,
                            "value": "Sample update value 1 of 3"
                          },
                          {
                            "sequence": 2,
                            "value": "Sample updated value 3 of 3"
                          }
                        ]
                      }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertTrue(is_numeric($client->getResponse()->getContent())); //Checking Reponse is numeric
        $this->assertNotNull($client->getResponse()->getContent(), "Metadata Id as response."); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        //Create Hierarchy metadata
        $url = $this->host . 'api/metadata';

        $sampleJson = '{
                        "userId":1,
                        "tagName": "Test qwe Hierarchy qwe qw adasd Tag we ss4",
                        "description": "Test Hierarchy Tag 4",
                        "displayLabel": "Hierarchy Tag",
                        "mandatory": false,
                        "multiselect": false,
                        "status": true,
                        "createdBy": 1,
                        "tagTypeId": 3,
                        "tagType": "Hierarchy",
                        "dataTypeId": 1,
                        "dataType": "String",
                        "resourceAssociated": true,
                        "metadataValues": [
                          {
                            "description": "New updated Tag 1",
                            "value": "New Tag 1",
                            "nodeStatus": "created",
                            "children": [
                              {
                                "description": "New updated Tag 1-1",
                                "value": "New Tag 1-1",
                                "nodeStatus": "created",
                                "children": []
                              },
                              {
                                "description": "New Tag 1-2",
                                "value": "New Tag 1-2",
                                "nodeStatus": "created",
                                "children": []
                              }
                            ]
                          }
                        ]
                      }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertTrue(is_numeric($client->getResponse()->getContent())); //Checking Reponse is numeric
        $this->assertNotNull($client->getResponse()->getContent(), "Metadata Id as response."); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        // check for duplicate metadata.
        //Request the Url with Post method and posting sample json content
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        //Check for permission error.
        $sampleJson = '{
                            "tagName": "Tag 1",
                            "description": "Metadata tag 1",
                            "displayLabel": "Tag 1",
                            "tagTypeId": "1",
                            "dataTypeId": "1",
                            "mandatory": true,
                            "multiselect": false,
                            "userId":1000
                          
                       }';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        //Check if empty input is passed.
        $sampleJson = '';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode 
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::getMetadataById
     * @todo   Implement testgetMetadataById().
     */
    public function testgetMetadataById() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application

        $client = $this->createClient();

        // Check for possitive case
        $id = 460;
        $userId = 66;
        $url = $this->host . 'api/metadata/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');  //Request the Url with Post method and posting sample json content
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Metadat by Id response"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        $this->assertContains('460', $client->getResponse()->getContent()); //checking the response contains Id which is passed by Url
        // Check for permission error
        $id = 460;
        $userId = '121312';
        $url = $this->host . 'api/metadata/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');         //Request the Url with Post method and posting sample json content
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        // Check if metadata id not exists.
        $id = 112312;
        $userId = 1;
        $url = $this->host . 'api/metadata/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');         //Request the Url with Post method and posting sample json content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        //END USER GET CHILD METADATA/TOPIC LIST

        /*
         * Test fetch for child metadata/topic/subtopic list based given parent metadata value id for end user
         */

        //success case
        $name = 'a';
        $metadataId = "SC_01";
        $searchType = "contains";
        $metadataValueId = 554;
        $perPage = 10;
        $sort = "%2Bname"; // +name sort
        $clientUserId = 1;
        $page = 1;

        $queryParam = '?clientUserId=' . $clientUserId . '&name=' . $name . '&metadataValueId=' . $metadataValueId . '&page=' . $page . '&perPage=' . $perPage . '&sort=' . $sort . '&searchType=' . $searchType;
        $url = $this->host . 'api/metadata/' . $metadataId . $queryParam;

        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertNotNull($client->getResponse()->getContent(), "Topic list response "); //
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::getMetadata
     * @todo   Implement testgetMetadata().
     */
    public function testgetMetadata() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        // Sample parameters for filtering,pagination,sorting
        $tagName = 'check 1';
        $description = 'check';
        $tagTypeId = 1;
        $page = 1;
        $perPage = 10;
        $sort = "%2bid"; // +id sort
        $userId = 66;

        $queryParam = '?tagName=' . $tagName . '&description=' . $description . '&tagTypeId=' . $tagTypeId . '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort . '&userId=' . $userId;

        $url = $this->host . 'api/metadata' . $queryParam;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];

        if ($reqTotal > 0) {

            if ($tagName != '') {
                $this->assertContains($tagName, $response);
            }

            if ($description != '') {
                $this->assertContains($description, $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "All list Metadata response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        // Check for permission issue
        $queryParam = '?userId=' . '';
        $url = $this->host . 'api/metadata' . $queryParam;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::updateMetadata
     * @todo   Implement testupdateMetadata().
     */
    public function testupdateMetadata() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        $id = 46;
        $url = $this->host . 'api/metadata/' . $id;

        //Json input for Free Text metadata
        $sampleJson = '{
                            "tagName": "Tag qeuy testinggg",
                            "description": "Metadata tag 2",
                            "displayLabel": "Tag 2",
                            "tagTypeId": "1",
                            "dataTypeId": "1",
                            "mandatory": true,
                            "multiselect": false,
                            "userId":1
                       }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content 
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        //update Lookup tag 
        $id = 366;
        $url = $this->host . 'api/metadata/' . $id;

        //Json input for Hierarchy metadata
        $sampleJson = '{
                        "userId":1,
                        "tagName": "Test updated values qwe qwe",
                        "description": "Metadata tag 3",
                        "displayLabel": "Tage 3",
                        "mandatory": false,
                        "multiselect": false,
                        "status": true,
                        "createdBy": 1,
                        "tagTypeId": 2,
                        "tagType": "Lookup",
                        "dataTypeId": 1,
                        "dataType": "String",
                        "resourceAssociated": true,
                        "metadataValues": [
                          {
                            "id": 150,
                            "sequence": 0,
                            "value": "Sample update value 1 of 3",
                            "nodeStatus": "updated"
                          },
                          {
                            "id": 153,
                            "sequence": 2,
                            "value": "Sample updated value 3 of 3",
                            "nodeStatus": "deleted"
                          },
                          {
                            "sequence": 1,
                            "value": "Sample value 2 of 3",
                            "nodeStatus": "created"
                          }
                        ]
                      }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content 
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        //Update Hierarchy tag .
        $id = 437;
        $url = $this->host . 'api/metadata/' . $id;

        //Json input for Hierarchy metadata
        $sampleJson = '{
                        "userId":1,
                        "tagName": "Test Hierarchy qwqw Tag updated qwe",
                        "description": "Test updated Hierarchy Tag",
                        "displayLabel": "Hierarchy Tag",
                        "mandatory": false,
                        "multiselect": false,
                        "status": true,
                        "createdBy": 1,
                        "tagTypeId": 3,
                        "tagType": "Hierarchy",
                        "dataTypeId": 1,
                        "dataType": "String",
                        "resourceAssociated": false,
                        "metadataValues": [
                          {
                            "id": 746,
                            "parentId": 0,
                            "description": "New Tag 1",
                            "value": "New Tag 1",
                            "nodeStatus": "updated",
                            "children": [
                              {
                                "id": 747,
                                "parentId": 746,
                                "description": "New Tag 1-1",
                                "value": "New Tag 1-1",
                                "nodeStatus": "deleted",
                                "children": []
                              },
                              {
                                "id": 748,
                                "parentId": 746,
                                "description": "New 1-2",
                                "value": "New Tag 1-2",
                                "nodeStatus": "updated",
                                "children": []
                              },
                               {
                                "description": "New 1-3",
                                "value": "New Tag 1-3",
                                "nodeStatus": "created",
                                "children": []
                              }
                            ]
                          }
                        ]
                        }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content 
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        // check for duplicate metadata tag which exists
        //Json input for sample User details
        $sampleJson = '{
                            "tagName": "Tag 1",
                            "description": "Metadata tag 2",
                            "displayLabel": "Tag 2",
                            "tagTypeId": "1",
                            "dataTypeId": "1",
                            "mandatory": true,
                            "multiselect": false,
                            "userId":1
                       }';
        $id = 437;
        $url = $this->host . 'api/metadata/' . $id;
        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content 
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        //Check for permission issue 
        $id = 46;
        $url = $this->host . 'api/metadata/' . $id;

        $sampleJson = '{
                            "tagName": "Tag 2",
                            "description": "Metadata tag 2",
                            "displayLabel": "Tag 2",
                            "tagTypeId": "1",
                            "dataTypeId": "1",
                            "mandatory": true,
                            "multiselect": false,
                            "userId":1000
                       }';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content 

        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        // Check if metadata id not exitsts and trying to update that metadata.
        $id = '01';
        $url = $this->host . 'api/metadata/' . $id;
        $sampleJson = '{ "userId":1}';

        //Request the Url with Post method and posting sample json content
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleJson); //Raw content
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::deleteMetadata
     * @todo   Implement testdeleteMetadata().
     */
    public function testdeleteMetadata() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();

        // Check for positive case
        $id = 40;
        $userId = 1;
        $url = $this->host . 'api/metadata/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        // Check for permission issues.
        $id = 40;
        $userId = '1000';
        $url = $this->host . 'api/metadata/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::testGetMandatoryMetadata
     * @todo   Implement testGetMandatoryMetadata().
     */
    public function testGetMandatoryMetadata() {
        $client = $this->createClient();

        $url = $this->host . 'api/mandatorymetadata';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');            //Request the Url with Get method

        if ($client->getResponse()->getStatusCode() == $this->app['cache']->fetch('HTTP_SUCCESS')) {
            $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
            $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
            $this->assertContains('Tag 2', $client->getResponse()->getContent());
            $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        } else {
            $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());             //Asserting the status Code
            $this->assertContains('1012', $client->getResponse()->getContent());
        }
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::testGetInstitutions
     * @todo   Implement testGetInstitutions().
     */
    public function testGetInstitutions() {
        $client = $this->createClient();

        $url = $this->host . 'api/institutions';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');          //Request the Url with Get method

        if ($client->getResponse()->getStatusCode() == $this->app['cache']->fetch('HTTP_SUCCESS')) {
            $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
            $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
            $this->assertContains('Institution 1', $client->getResponse()->getContent());
            $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        } else {
            $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());             //Asserting the status Code
            $this->assertContains('1013', $client->getResponse()->getContent());
        }
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::getSubjects
     * @todo   Implement testGetSubjects().
     */
    public function testGetSubjects() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();
        $productId = 10000;
        $randomMetatadataId = "SC_01";

        $url = $this->host . "api/products/" . $productId . "/metadata/" . $randomMetatadataId;

        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                '');
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "All list subject response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::getSnomedTerms
     * @todo   Implement testGetSnomedTerms().
     */
    public function testGetSnomedTerms() {

        //Calling the creatclient method which acts as a browser, and allows you to interact with your application
        $client = $this->createClient();
        $taxonomyId = 20000; //Metadata value id
        $taxonomyType = "QB"; //Metadata value id will be passes when the taxonomy type is QB

        $url = $this->host . "api/snomed/" . $taxonomyId . "/" . $taxonomyType;

        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                '');
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "List snomed concepts with description,synomyms and children "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        $taxonomyId = 100000000; //snomed concept id
        $taxonomyType = "snomed"; //Snomed concept id will be passes when the taxonomy type is QB

        $url = $this->host . "api/snomed/" . $taxonomyId . "/" . $taxonomyType;

        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                '');
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "List snomed concepts with description,synomyms and children "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Metadata\MetadataController::getTaxonomyWithProgress
     * @todo   Implement testGetTaxonomyWithProgress().
     */
    public function testGetTaxonomyWithProgress() {
        $client = $this->createClient();

        /*
         * Success scenario
         */
        $productIds = 10000;
        $id = 'SC_01'; // random metadata for a client

        $url = $this->host . '/api/metadata/' . $productIds . '/metadata/' . $id;
        $$client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type

        /*
         * client metadata not found / product id not found
         */
        $productIds = 100000000000;
        $id = 'SC_0000001'; // random metadata for a client

        $url = $this->host . '/api/metadata/' . $productIds . '/metadata/' . $id;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->accessToken), //Header
                ''); //Raw content

        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

}
