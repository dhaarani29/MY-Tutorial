<?php

namespace QuizzingPlatform\Admin\Itembanks;

//Use silex webtestcase which act as a browser

use QuizzingPlatform\Services\TestWebtestcase;
use Silex\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 15:06:06.
 */
class ItembanksControllerTest extends TestWebtestcase {

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::testGetItemcollection
     * @todo   Implement testGetItemcollection().
     */
    public function testGetItemcollection() {
        $client = $this->createClient();

        /*
         * Success scenario
         */
        $userId = 66;
        $url = $this->host . 'api/itembanks' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('version 123', $client->getResponse()->getContent());

        /*
         * Permission error
         */
        $userId = 323;
        $url = $this->host . 'api/itembanks' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertContains('5500', $client->getResponse()->getContent());

        /*
         * With filters
         */
        $bankName = '';
        $description = '';
        $metadataFilter = '';
        $perPage = 10;
        $sort = "%2BbankName"; // +id sort
        $userId = 1;
        $page = 1;

        $queryParam = '?bankName=' . $bankName . '&description=' . $description . '&metadataAssoc=' . $metadataFilter .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort . '&userId=' . $userId;

        $url = $this->host . 'api/itembanks' . $queryParam; //echo $url;die;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];
        if ($reqTotal > 0) {
            if ($bankName != '') {
                $this->assertContains('Published', $response);
            }
            if ($description != '') {
                $this->assertContains('collectin', $response);
            }
            if ($metadataFilter != '') {
                $this->assertContains('QB 1', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Item collection list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Associated itemBank for the particular item
         */
        $userId = 66;
        $queryParam = '&associated=1&itemId=25';
        $url = $this->host . 'api/itembanks' . '?userId=' . $userId . $queryParam;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertContains('bank 1', $client->getResponse()->getContent());

        /*
         * dissociated itemBank for the particular item
         */
        $userId = 1;
        $queryParam = '&associated=0&itemId=25';
        $url = $this->host . 'api/itembanks' . '?userId=' . $userId . $queryParam;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertContains('asset test 1', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::testCreateItemcollection
     * @todo   Implement testCreateItemcollection().
     */
    public function testCreateItemcollection() {
        $client = $this->createClient();


        /*
         * Success scenario
         */
        $sampleInput = '{
                        "userId":1,
                        "itemBankName":"QB 196",
                        "description":"New Qb",
                        "statusName":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":[
                        {
                          "itemId": 11,
                          "label": "Demo",
                          "version": 1
                        }]}';
        $url = $this->host . 'api/itembanks';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Item Id as response."); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Duplicate item bank name
         */
        $sampleInput = '{
                        "userId":1,
                        "itemBankName":"archi test updated edi",
                        "description":"New Qb",
                        "status":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":"78"}';
        $url = $this->host . 'api/itembanks';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3001', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Request empty
         */
        $sampleInput = '';
        $url = $this->host . 'api/itembanks';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3004', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Invalid request
         */
        $sampleInput = '{
                        "userId111":1,
                        "itemBankName":"QB 4",
                        "description":"New Qb",
                        "status":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":"78"}';
        $url = $this->host . 'api/itembanks';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3003', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Permission error
         */
        $sampleInput = '{
                        "userId":1000,
                        "itemBankName":"QB 4",
                        "description":"New Qb",
                        "status":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":"78"}';
        $url = $this->host . 'api/itembanks';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::testUpdateItemcollection
     * @todo   Implement testUpdateItemcollection().
     */
    public function testUpdateItemcollection() {
        $client = $this->createClient();

        /*
         * Permission error
         */
        $id = '25';
        $sampleInput = '{
                        "userId":1000,
                        "itemBankName":"QB 4",
                        "description":"New Qb",
                        "status":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":"78",
                        "dissociated":"132"}';
        $url = $this->host . 'api/itembanks/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Invalid request
         */
        $id = '25';
        $sampleInput = '{
                        "userId111":1,
                        "itemBankName":"QB 4",
                        "description":"New Qb",
                        "status":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":"78",
                         "dissociated":"132"}';
        $url = $this->host . 'api/itembanks/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3007', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Request empty
         */
        $id = '25';
        $sampleInput = '';
        $url = $this->host . 'api/itembanks/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3007', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success Scenario
         */
        $id = '51';
        $sampleInput = '{
                        "userId":1,
                        "itemBankName":"QB 111",
                        "description":"New Qb",
                        "statusName":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":[
                            {
                              "itemId": 11,
                              "label": "Demo",
                              "version": 1
                            }]
                        }';
        $url = $this->host . 'api/itembanks/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());

        /*
         * item bank Not exist
         */
        $id = '456';
        $sampleInput = '{
                        "userId":1,
                        "itemBankName":"QB 111",
                        "description":"New Qb",
                        "status":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":"132",
                        "dissociated":"78"}';
        $url = $this->host . 'api/itembanks/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Duplicate item bank name
         */
        $id = '3';
        $sampleInput = '{
                        "userId":66,
                        "itemBankName":"bank 1",
                        "description":"New Qb",
                        "statusName":"Published",
                        "metadataAssoc": {
                        "79": "test meatdata",
                        "380": "test meta"
                        },
                        "associated":[
                            {
                              "itemId": 11,
                              "label": "Demo",
                              "version": 1
                            }]
                        }';
        $url = $this->host . 'api/itembanks/' . $id;
        $client->request(
                'PUT', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);
        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3001', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::testDeleteItemcollection
     * @todo   Implement testDeleteItemcollection().
     */
    public function testDeleteItemcollection() {
        $client = $this->createClient();

        /*
         * Permission error
         */
        $id = '25';
        $userId = 100;
        $url = $this->host . 'api/itembanks/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * item bank Not exist
         */
        $id = '190';
        $userId = 66;
        $url = $this->host . 'api/itembanks/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario
         */
        $id = '40';
        $userId = 1;
        $url = $this->host . 'api/itembanks/' . $id . '?userId=' . $userId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Response is true"); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
    }

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::testGetItemcollectionById
     * @todo   Implement testGetItemcollectionById().
     */
    public function testGetItemcollectionById() {
        $client = $this->createClient();

        /*
         * Permission error
         */
        $id = '25';
        $userId = 100;
        $url = $this->host . 'api/itembanks/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * item bank Not exist
         */
        $id = '19';
        $userId = 66;
        $url = $this->host . 'api/itembanks/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('3005', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario
         */
        $id = '25';
        $userId = 1;
        $url = $this->host . 'api/itembanks/' . $id . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('archi test updated', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::testGetItemList
     * @todo   Implement testGetItemList().
     */
    public function testGetItemList() {
        $client = $this->createClient();

        /*
         * Permission error
         */
        $userId = 130;
        $url = $this->host . 'api/itemlist' . '?userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario for create(listing all the items)
         */
        $userId = 66;
        $action = 'create';
        $url = $this->host . 'api/itemlist' . '?userId=' . $userId . '&action=' . $action;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('25', $client->getResponse()->getContent());

        /*
         * Success scenario for edit(associated items in top)
         */
        $userId = 66;
        $action = 'edit';
        $itemBankId = '3';
        $url = $this->host . 'api/itemlist' . '?userId=' . $userId . '&action=' . $action . '&itemBankId=' . $itemBankId . '&sort=%2Blabel';
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('25', $client->getResponse()->getContent());

        /*
         * Success scenario for view(only associated items)
         */
        $userId = 66;
        $action = 'view';
        $itemBankId = '3';
        $url = $this->host . 'api/itemlist' . '?userId=' . $userId . '&action=' . $action . '&itemBankId=' . $itemBankId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('Demo', $client->getResponse()->getContent());

        /*
         * With filters
         */
        $label = 'demo';
        $metadataFilter = '';
        $perPage = 10;
        $sort = "%2BbankName"; // +id sort
        $userId = 66;
        $page = 1;

        $queryParam = '?userId=' . $userId . '&label=' . $label . '&metadataAssoc=' . $metadataFilter .
                '&page=' . $page . '&perPage=' . $perPage
                . '&sort=' . $sort;

        $url = $this->host . 'api/itemlist' . $queryParam; //echo $url;die;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Request the Url with Post method and posting sample json content
        $response = $client->getResponse()->getContent();
        $res = get_object_vars(json_decode($response));
        $reqTotal = $res['total'];
        if ($reqTotal > 0) {
            if ($label != '') {
                $this->assertContains('Demo', $response);
            }
            if ($metadataFilter != '') {
                $this->assertContains('assoc11', $response);
            }
        }

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertNotNull($client->getResponse()->getContent(), "Item collection list response "); //Response content not null
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /**

     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::itembanksimport
     * 
     */
    public function testItembanksimport() {
        $client = $this->createClient();

        /*
         * Permission error
         */
        $sampleInputs = '{
            "contentType":1,
            "flowChunkNumber":"1",
            "flowChunkSize":"10485760",
            "flowCurrentChunkSize":"1823898",
            "flowTotalSize":"1823898",
            "flowIdentifier":"1823898-finalupload_misssingxmlzip",
            "flowFilename":"final upload_misssingxml.zip",
            "flowRelativePath":"final upload_misssingxml.zip",
            "flowTotalChunks":"1",
            "tmpFileName":"57198883f73d9e270da4c70d317db233.zip",
            "selectBankType":1,
            "itemBankName":"vxcvxcvv",
            "userId":659,
            "statusName":"Imported"}';
        $url = $this->host . 'api/itembanksimport';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);
        //echo $client->getResponse()->getStatusCode();die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Dupicate bank name
         */
        $sampleInput = '{
            "contentType":1,
            "flowChunkNumber":"1",
            "flowChunkSize":"10485760",
            "flowCurrentChunkSize":"1823898",
            "flowTotalSize":"1823898",
            "flowIdentifier":"1823898-finalupload_misssingxmlzip",
            "flowFilename":"final upload_misssingxml.zip",
            "flowRelativePath":"final upload_misssingxml.zip",
            "flowTotalChunks":"1",
            "tmpFileName":"57198883f73d9e270da4c70d317db233.zip",
            "selectBankType":1,
            "itemBankName":"vxcvxcvv",
            "userId":65,
            "statusName":"Imported"}';
        $url = $this->host . 'api/itembanksimport';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInput);

        $this->assertEquals($this->app['cache']->fetch('HTTP_DUPLICATE'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('Duplicate question collection name is not allowed.', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
        /*
         * missing xml file error
         */
        $sampleInputs = '{
            "contentType":1,
            "flowChunkNumber":"1",
            "flowChunkSize":"10485760",
            "flowCurrentChunkSize":"1823898",
            "flowTotalSize":"1823898",
            "flowIdentifier":"1823898-finalupload_misssingxmlzip",
            "flowFilename":"final upload_misssingxml.zip",
            "flowRelativePath":"final upload_misssingxml.zip",
            "flowTotalChunks":"1",
            "tmpFileName":"57198883f73d9e270da4c70d317db233.zip",
            "selectBankType":1,
            "itemBankName":"test bank sri1",
            "userId":65,
            "statusName":"Imported"}';
        $url = $this->host . 'api/itembanksimport';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);
        //echo $client->getResponse()->getStatusCode();die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('"Upload failed', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * invalid xml file error
         */
        $sampleInputs = '{
	"contentType": 1,
	"selectBankType": "2",
	"itemBankId": {
		"itemBankId": "180",
		"bankName": "zzxxz",
		"description": "zzxxz",
		"statusName": "Imported",
		"itemCount": null,
		"metadataName": ""
	},
	"flowChunkNumber": "1",
	"flowChunkSize": "10485760",
	"flowCurrentChunkSize": "1826582",
	"flowTotalSize": "1826582",
	"flowIdentifier": "1826582-finalupload_invalidezip",
	"flowFilename": "final upload_invalide.zip",
	"flowRelativePath": "final upload_invalide.zip",
	"flowTotalChunks": "1",
	"tmpFileName": "70d5733a9c979210e2109c5ca107f846.zip",
	"userId": 65,
	"itemBankExistingId": "180"
        }';
        $url = $this->host . 'api/itembanksimport';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);
        //echo $client->getResponse()->getStatusCode();die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_BADREQUEST'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('"Upload failed', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * success scenario
         */

        $sampleInputs = '{
	"contentType": 1,
	"selectBankType": "2",
	"itemBankId": {
		"itemBankId": "9",
		"bankName": "tag1",
		"description": "tag1",
		"statusName": "Published",
		"itemCount": "1",
		"metadataName": "derm3"
	},
	"flowChunkNumber": "1",
	"flowChunkSize": "10485760",
	"flowCurrentChunkSize": "1826561",
	"flowTotalSize": "1826561",
	"flowIdentifier": "1826561-finalupload_successzip",
	"flowFilename": "final upload_success.zip",
	"flowRelativePath": "final upload_success.zip",
	"flowTotalChunks": "1",
	"tmpFileName": "05171d50ef12e9734df04f506b315a93.zip",
	"userId": 65,
	"itemBankExistingId": "9"
        }';
        $url = $this->host . 'api/itembanksimport';
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('CONTENT_TYPE' => 'application/json', 'HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                $sampleInputs);

        $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
    }

    /*
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::parseItems
     * @todo   Implement testParseItems().
     */

//    public function testParseItems() {
//        $client = $this->createClient();
//        $url = $this->host . 'api/crons/upload-items';
//        $client->request('GET', $url);
//        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode()); //checking the statusCode
//        $this->assertNotNull($client->getResponse()->getContent(), "Item collection list response "); //Response content not null
//        $this->assertTrue($client->getResponse()->isSuccessful());
//        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json
//
//    }

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::testGetItemList
     * 
     */
    public function testImportstatus() {


        $client = $this->createClient();

        /*
         * Permission error
         */
        $userId = 130;
        $bankId = 195;
        $url = $this->host . 'api/importstatus/' . $bankId . '?id=' . $bankId . '&userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');

        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json


        /*
         * Success scenario listing all uload status
         */
        $userId = 65;
        $bankId = 195;
        $url = $this->host . 'api/importstatus/' . $bankId . '?id=' . $bankId . '&page=1&perPage=10&sort=%2BcreatedDate&userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('status', $client->getResponse()->getContent());
    }

    /**
     * @covers QuizzingPlatform\Admin\Itembanks\Itembanks::publishitemcollection
     * 
     */
    public function testPublishitemcollection() {
        $client = $this->createClient();

        /*
         * Permission error
         */
        $userId = 130;
        $bankId = 131;
        $pageValue = 'Authoring';
        $url = $this->host . 'api/publishitemcollection/' . $bankId . '?itemIds=all&publishValue=all&statusDependedValue=' . $pageValue . '&userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');
        //echo $this->app['cache']->fetch('HTTP_FORBIDDEN')."^^^". $client->getResponse()->getStatusCode();die;
        $this->assertEquals($this->app['cache']->fetch('HTTP_FORBIDDEN'), $client->getResponse()->getStatusCode()); //checking the statusCode
        $this->assertContains('5500', $client->getResponse()->getContent());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'), "Content type should be Application/json"); //Content type is json

        /*
         * Success scenario all authoring all items
         */
        $userId = 65;
        $bankId = 163;
        $pageValue = 'Authoring';
        $url = $this->host . 'api/publishitemcollection/' . $bankId . '?itemIds=all&publishValue=all&statusDependedValue=' . $pageValue . '&userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('true', $client->getResponse()->getContent());
        /*
         * Success scenario all publishing all items
         */
        $userId = 65;
        $bankId = 163;
        $pageValue = 'Published';
        $url = $this->host . 'api/publishitemcollection/' . $bankId . '?itemIds=all&publishValue=all&statusDependedValue=' . $pageValue . '&userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('true', $client->getResponse()->getContent());

        /*
         * Success scenario for publishing selected items
         */
        $userId = 65;
        $bankId = 131;
        $pageValue = 'Published';
        $url = $this->host . 'api/publishitemcollection/' . $bankId . '?itemIds=555,557&publishValue=selected&statusDependedValue=' . $pageValue . '&userId=' . $userId;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                '');

        $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
        $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        $this->assertContains('true', $client->getResponse()->getContent());
    }

}
