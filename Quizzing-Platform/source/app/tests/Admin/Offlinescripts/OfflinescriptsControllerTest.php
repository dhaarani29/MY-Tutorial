<?php

namespace QuizzingPlatform\Admin\Offlinescripts;

//Use silex webtestcase which act as a browser

use QuizzingPlatform\Services\TestWebtestcase;
use Silex\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 15:06:06.
 */
class OfflinescriptsControllerTest extends TestWebtestcase {

    /**
     * @covers QuizzingPlatform\Admin\Offlinescripts\OfflinescriptsController::solrSearch
     * @todo   Implement testSolrSearch().
     */
    public function testSolrSearch() {

        $client = $this->createClient();

        // Search for metadata ids in solr
        $conceptId = "1000,1001,1002,1003,1004";
        $conceptType = $this->app['config']['qbTaxonomyType'];

        $url = $this->host . 'api/item/solr-search/' . $conceptId . '/' . $conceptType;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Raw content

        if ($client->getResponse()->getStatusCode() == $this->app['cache']->fetch('HTTP_SUCCESS')) {
            $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
            $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
            $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        } else {
            $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());             //Asserting the status Code
        }

        //Search for snomed ids.  

        $conceptId = "1532007,15033003";
        $conceptType = $this->app['config']['snomedTaxonomyType'];

        $url = $this->host . 'api/item/solr-search/' . $conceptId . '/' . $conceptType;
        $client->request(
                'GET', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Raw content

        if ($client->getResponse()->getStatusCode() == $this->app['cache']->fetch('HTTP_SUCCESS')) {
            $this->assertEquals($this->app['cache']->fetch('HTTP_SUCCESS'), $client->getResponse()->getStatusCode());  //Asserting the status Code
            $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
            $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json')); //Asserting the Content type
        } else {
            $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());             //Asserting the status Code
        }
    }

    /**
     * @covers QuizzingPlatform\Admin\Offlinescripts\OfflinescriptsController::solrIndex
     * @todo   Implement testSolrIndex().
     */
    public function testSolrIndex() {

        $client = $this->createClient();

        //Index the item in solr
        $itemId = "696";

        $url = $this->host . 'api/item/solr-index/' . $itemId;
        $client->request(
                'POST', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Raw content

        if ($client->getResponse()->getStatusCode() == $this->app['cache']->fetch('HTTP_CREATED')) {
            $this->assertEquals($this->app['cache']->fetch('HTTP_CREATED'), $client->getResponse()->getStatusCode());  //Asserting the status Code
            $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        } else {
            $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());             //Asserting the status Code
        }
    }

    /**
     * @covers QuizzingPlatform\Admin\Offlinescripts\OfflinescriptsController::solrDelete
     * @todo   Implement testSolrDelete().
     */
    public function testSolrDelete() {

        $client = $this->createClient();

        //Delete the item from solr
        $itemId = "696";

        $url = $this->host . 'api/item/solr-delete/' . $itemId;
        $client->request(
                'DELETE', //Method
                $url, //Request URL
                array(), //Parameters
                array(), //Files
                array('HTTP_AUTHORIZATION' => $this->adminAccessToken, 'HTTP_REQUESTFROM' => $this->requestFrom), //Header
                ''); //Raw content 

        if ($client->getResponse()->getStatusCode() == $this->app['cache']->fetch('HTTP_NOCONTENT')) {
            $this->assertEquals($this->app['cache']->fetch('HTTP_NOCONTENT'), $client->getResponse()->getStatusCode());  //Asserting the status Code
            $this->assertTrue($client->getResponse()->isSuccessful()); //Checking the response is successfull
        } else {
            $this->assertEquals($this->app['cache']->fetch('HTTP_NOTFOUND'), $client->getResponse()->getStatusCode());             //Asserting the status Code
        }
    }

}
